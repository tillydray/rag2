:PROPERTIES:
:GPTEL_MODEL: gpt-4o
:GPTEL_BACKEND: ChatGPT
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Respond concisely.
:GPTEL_BOUNDS: nil
:END:
#+title: README
https://learnbybuilding.ai/tutorials/rag-from-scratch#working-through-an-example-the-simplest-rag-system

* main
:PROPERTIES:                                                                                           
:CREATED:  [2025-01-24 Fri 16:41]
:END:
#+name: main
#+begin_src python :tangle main.py
if __name__ == '__main__':
    from vars import corpus_of_documents, user_prompt, user_input, base_prompt
    from jaccard import return_response
    from openai import OpenAI

    relevant_document = return_response(user_input, corpus_of_documents)                                                   
    full_response = []
    
    prompt = base_prompt.format(user_input=user_input, relevant_document=relevant_document)            
    
    client = OpenAI()
    response = client.chat.completions.create(                                                         
        model="gpt-4",
        temperature=1,
        messages=[{"role": "system", "content": prompt}]
    )
                                                                                                       
    print(response.choices[0].message.content)                                                         
#+end_src

** run
#+begin_src shell :results output verbatim
set -o pipefail                                                                                        
pipenv run python main.py
#+end_src

#+RESULTS:
: Visit a local park instead.

* vars
https://learnbybuilding.ai/tutorials/rag-from-scratch#getting-a-collection-of-documents
#+name: vars
#+begin_src python :tangle vars.py
corpus_of_documents = [
    "Take a leisurely walk in the park and enjoy the fresh air.",
    "Visit a local museum and discover something new.",
    "Attend a live music concert and feel the rhythm.",
    "Go for a hike and admire the natural scenery.",
    "Have a picnic with friends and share some laughs.",
    "Explore a new cuisine by dining at an ethnic restaurant.",
    "Take a yoga class and stretch your body and mind.",
    "Join a local sports league and enjoy some friendly competition.",
    "Attend a workshop or lecture on a topic you're interested in.",
    "Visit an amusement park and ride the roller coasters."
]                                                                                                      
os.environ["OPENAI_API_KEY"] = "CHANGE ME"
user_prompt = "What is a leisure activity that you like?"
user_input = "I don't like to hike"
base_prompt = """                                                                                           
You are a bot that makes recommendations for activities. You answer in very short sentences and do not include extra information.
This is the recommended activity: {relevant_document}
The user input is: {user_input}
Compile a recommendation to the user based on the recommended activity and the user input.
"""
#+end_src
* jaccard_similarity
:PROPERTIES:
:CREATED:  [2025-01-24 Fri 16:39]
:END:
https://learnbybuilding.ai/tutorials/rag-from-scratch#defining-and-performing-the-similarity-measure
#+name: jaccard_similarity
#+begin_src python :tangle jaccard.py
def jaccard_similarity(query, document):                                                               
    query = query.lower().split(" ")
    document = document.lower().split(" ")
    intersection = set(query).intersection(set(document))
    union = set(query).union(set(document))
    return len(intersection)/len(union)


def return_response(query, corpus):
    similarities = []
    for doc in corpus:
        similarity = jaccard_similarity(query, doc)
        similarities.append(similarity)
    return corpus[similarities.index(max(similarities))]
#+end_src
